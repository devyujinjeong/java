---------------------------------------------------------------------------------------------------------------------------------------------------
1. 배열
---------------------------------------------------------------------------------------------------------------------------------------------------
>> 배열 : 메모리의 연속되는 공간에 값이 있는 형태 (저장공간의 나열)

>> 배열을 사용하는 이유
	  	1) 변수를 여러 개 선언하면 이름도 여러 개 생긴다. 이 때 각 저장공간을 관리하기가 불편하다.
		     이 때, n칸 배열을 한 번만 선언하면 저장공간도 n개 생기고, 이름도 1개이기 때문에 관리가 편하다.

		  2) 규칙성이 없는 값에 규칙성을 부여하기 위해서 

>> 배열의 선언 (null과 new 제대로 이해하기!!!)
			자료형 [] 배열명 = {값1, 값2, ...}; //어떤 값을 넣을 지 알 때 사용, 얘는 new가 숨겨진거
			자료형 [] 배열명 = new 자료형 [칸수]; //어떤 값을 넣을 지 모르지만, 몇 칸을 만들지는 알 때
			자료형 [] 배열명 = null;  //어떤 값을 넣을지, 몇 칸 만들지 모를 때 사용한다.

			※ new: Heap이라는 동적 메모리에 할당, 자동 초기화
			※ null: 주소의 초기값으로 어떤 주소를 넣을지 모를 때 작성하는 값
			※ 자바에서 배열은 항상 Heap(동적 메모리)에 할당되기 때문에 메모리 상으로 동적배열만 존재한다.

>> 배열의 구조 
      int[] arData = {3, 5, 1, 2, 8};

  	  arData라는 이름의 저장공간은 한 개 만들어지며, 여기에는 한 개의 값만 담을 수 있다.
     	5개의 값을 담기 위해서는 5칸이 필요하며, 이는 Heap 메모리에 할당된다. 5칸의 저장공간 중
   	  첫 번째 저장공간의 주소값이 arData 저장공간으로 들어가며, 다음 주소에 접근하기 위해서는
   	  +n을 한다. 예를 들어 arData + 2는 1이라는 값이 담긴 주소값이 되며,
   	  *(arData + 2)는 해당 주소에 가서 읽어온 1이라는 값이 된다. JAVA에서는 직접 주소에 접근하는
     	연산자가 없기 때문에 위와 같은 식을 []로 치환하여 사용하며, arData[2]로 사용한다.
  	  각각의 방 번호는 index라고 부르며, 배열은 시작주소를 가지고 있기 때문에 인덱스 번호는 항상 0부터 시작된다.

>> 배열의 길이 - length
		  배열을 선언하면 length라는 상수가 선언되고, 해당 배열의 길이가 담긴다.
		  배열명.length로 사용하게 된다.

>> 배열의 사용
		  int[] arData = new int[5] //arData는 뒤에 대입연산자가 있으므로 저장공간이다.
		  arData[0]=10; //저장공간
		  arData[0]+9; //값
		  System.out.println(arData[1]); //값: 자동초기화되기 때문에 0이 출력됨
		  arData[2]=arData[0]+arData[1]; //저장공간, 값, 값
		  System.out.println(arData[5]) //error 발생: 왜냐 방은 5개라 index는 0~4번 방이니깐

---------------------------------------------------------------------------------------------------------------------------------------------------
2. 2차원 배열
---------------------------------------------------------------------------------------------------------------------------------------------------
>> 2차원 배열 : 배열 안에 배열 
		  1차원 배열을 여러 번 선언하면 관리가 힘들기 때문에 2차원 배열을 한 번 선언

>> 2차원 배열 선언
		  자료형[][] 배열명 = {{값1,값2,값3,...},{값4,값5,값6,...}};
		  자료형[][] 배열명 = new 자료형[행][열];
		  자료형[][] 배열명 = null;

		  int[][] arrData = new int[2][3];
		   □			arrData
	    □□			arrData[행]							length(행의 길이)
    □□□ □□□		arrData[행][열]:이건 이제 값		length(열의 길이)
