------------------------------------------------------------------------------------------------------------------------------------------------------
1. 추상 클래스
------------------------------------------------------------------------------------------------------------------------------------------------------
>> 추상 클래스 
		필드 안에 구현이 안된 메소드가 선언되어 있는 클래스를 추상 클래스라고 한다.
		이 때, 구현되지 않은 메소드를 추상 메소드라고 부른다.

		반드시 재정의를 통해 구현을 해야지만 메모리에 할당되기 때문에
		"강제성"을 부여하기 위해서 추상 메소드를 선언한다. 

>> 추상 클래스 선언
		abstract class 클래스명{
			abstract 리턴타입 메소드명(매개변수,...);
			일반 메소드 선언 가능.
		}

>> 공통된 필드와 메소드 통일 (유지보수성을 높이고 통일성 유지)

------------------------------------------------------------------------------------------------------------------------------------------------------
2. 인터페이스(틀)
------------------------------------------------------------------------------------------------------------------------------------------------------
>> 인터페이스
		추상 클래스를 고도화시킨 문법, 상수와 추상 메소드만 존재한다.
		구현은 지정한 클래스에서 진행하고, 인터페이스 다른 클래스에 지정할 때에는 implements 키워드를 사용한다.

>> 추상 클래스와 인터페이스 간의 관계
  		인터페이스를 클래스에 바로 지정하면 모든 메소드에 강제성이 부여되어서 전부 다 구현해야 한다. 
		하지만 일반적인 상황에서는 모든 것이 아닌, 필요한 메소드를 골라서 재정의해야한다.
		인터페이스를 직접 지정하지 않고 다른 클래스에 지정한 후 바디를 만들어 놓는다면,
    		강제성이 소멸되고 이 클래스를 상속받아서 필드를 구현한다면, 골라서 재정의할 수 있게 된다.
   		이 때 중간에서 강제성을 없애주는 클래스를 추상 클래스로 선언하기로 하며,
   		추상 클래스 이름 뒤에는 Adapter를 붙여서 목적을 알려준다.

>> 내부 클래스(inner class)
		하나의 클래스에서 a 작업과 b 작업이 있을 때에는 따로 분리하여 클래스로 만들지 않고,
		클래스 안에 클래스를 선언하여 설계한다. 이 때 밖에 있는 클래스를 외부 클래스라고 하며,
		안에 선언된 클래스를 내부 클래스라고 한다. 외부 클래스가 메모리에 할당되어야
		내부 클래스를 객체화할 수 있기 때문에 클래스를 숨기기 위해서 내부 클래스를 사용하기도 하며,
		이를 캡슐화 또는 은닉화라고 한다. 내부 클래스는 외부 클래스의 필드이기 때문에
		외부 클래스의 필드를 자신의 필드처럼 가져다 사용할 수 있지만 상속관계가 아니기 때문에
		내부 클래스일지라도 extends를 통해 다른 클래스를 상속받아서 사용할 수 있다.

>> 익명 클래스(Anonymous Inner Class)
		이름이 없는 클래스이며 구현되지 않은 필드를 구현하기 위해서 일회성으로 생성되는 클래스이다.

------------------------------------------------------------------------------------------------------------------------------------------------------
3. 함수형 인터페이스
------------------------------------------------------------------------------------------------------------------------------------------------------
>> 함수형 인터페이스(Functional Interface)
		인터페이스 중 추상메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.
		이 때 @FunctionalInterface를 인터페이스 위에 작성하여 단 하나의 추상 메소드만 선언할 수 있도록 제한해야 한다.

>> 람다식(Lambda Expression)
		함수형 인터페이스에서는 한 개의 추상메소드만 존재하기 때문에 구현 시 메소드 이름이 딱히 필요가 없다.
		람다식은 이름이 없는 메소드로서 값처럼 사용이 가능하며, 매개변수로도 전달이 가능하다.
		그래서 람다식을 익명 메소드라고도 부른다.

>> 람다식 문법
		 1. (매개변수 형식 나열, ...) -> 리턴값;
  		 2. (매개변수 형식 나열, ...) -> {2개 이상의 문장 작성};
 		 3. (매개변수명, ...) -> 리턴값;
  		 4. (매개변수명, ...) -> {2개 이상의 문장 작성};
  		 5. 매개변수명 -> 리턴값; //매개변수가 하나인 경우 소괄호 생략 가능
  		 6. 매개변수명 -> {2개 이상의 문장 작성};
  		 7. () -> 리턴값; //매개변수가 없는 경우
  		 8. () -> {2개 이상의 문장 작성};
