-------------------------------------------------------------------------------------------------------------------------------------------
1. 다형성(polymorphism)
-------------------------------------------------------------------------------------------------------------------------------------------
>> 다형성
		1) 오버로딩(Overloading)
				매개변수의 개수 또는 타입이 다르면 동일한 이름의 메소드로 선언할 수 있다.
				
		2) 오버라이딩(Overriding)
				부모 필드에서 선언한 메소드를 자식 필드에서 수정하고자 할 때 사용한다.

>> 다형성의 장점
		1) 유지보수가 쉽다.
		2) 객체의 재사용이 쉽다.
		3) 클래스 간의 의존성을 줄여 확장성은 높아지고 결합도는 낮아진다.

-------------------------------------------------------------------------------------------------------------------------------------------
2. 상속(inheritance)
-------------------------------------------------------------------------------------------------------------------------------------------
>> 상속
		1) 기존에 선언된 클래스의 필드를 다른 클래스의 필드로 사용하고자 할 때
		2) 여러 클래스 선언 시 공통필드가 있을 경우 부모 클래스를 선언하고 기존 클래스들에게 상속해준다.

>> 상속 문법
		class A{
			A 필드
		}

		class B extends A{ //A는 부모 클래스, A를 확장함
			A, B 필드
		}

		A: 부모 클래스, 상위 클래스, 슈퍼 클래스, 기반 클래스
		B: 자식 클래스, 하위 클래스, 서브 클래스, 파생 클래스

>> super(): 부모 생성자
		자식 클래스 타입의 객체로 부모 필드에 접근할 수 있다.
		하지만 자식 생성자만 호출하기 때문에, 자식 필드만 메모리에 할당한다고 생각할 수 있다.
		사실 자식 생성자에서 항상 부모 생성자를 호출하기 때문에 자식 객체에서도 자식필드에 접근할 수 있다.
		이 때 부모 생성자를 호출하는 방법은 super()를 사용하는 것이다.
		만약, super()를 작성하지 않더라도 컴파일러가 자동으로 작성해준다. 

-------------------------------------------------------------------------------------------------------------------------------------------
3. 접근 권한 제어자(접근자)
-------------------------------------------------------------------------------------------------------------------------------------------
>> default
    다른 패키지에서 접근 불가

>> public
    모든 곳에서 접근 가능, 클래스에 작성 시 메인 클래스를 의미 
		자바 파일과 동일한 이름을 지닌 하나의 클래스에만 public을 붙일 수 있음 

>> protected
    자기 패키지와, 패키지가 다르더라도 자식 클래스에서는 접근이 가능

>> private
    다른 클래스에서 접근 불가
    메소드로만 접근(getter,setter) ★ --> 메소드 빨리 만들어라~!

-------------------------------------------------------------------------------------------------------------------------------------------
4. Casting
-------------------------------------------------------------------------------------------------------------------------------------------
※ 모든 자식은 부모 타입이다. (역은 성립하지 않음)

>> Casting
		1)  up casting
				자식 값을 부모 타입으로 형변환
		2) down casting
				up casting된 객체를 자식 타입으로 형변환

		※ 부모 값을 자식 타입으로 형변환 시 오류

>> instanceof : 객체 간 타입 비교
		a instanceof A: a가 A타입이면 true, 아니면 false
