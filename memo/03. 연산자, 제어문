----------------------------------------------------------------------------------------------------------------------------------------------
1. 연산자
----------------------------------------------------------------------------------------------------------------------------------------------

>> 연산자
			기능이 있는 특수문자.

>> 우선순위
			하나의 수식에 여러 연산자가 사용될 경우 어떤 연산자부터 연산되는지를 정해놓은 순위 
			
			최우선 연산자
			단항 연산자
			산술 연산자
			쉬프트 연산자
			관계 연산자
			논리 연산자
			삼항 연산자
			대입 연산자

>> 결합성
			하나의 수식에 동일한 연산자가 여러 개 사용되면 알맞은 방향으로 결합되어 연산되는 성질

>> 논리형(boolean)- 1byte
			참: true
			거짓: false

			boolean isTrue=true;
			boolean isTrue=False;

>> 조건식
			결과가 참 또는 거짓, 둘 중 하나가 나오는 식
			true 또는 false 값.
	
			ex) boolean check=10==11;

			관계 연산자
				== : 같다
				!= : 같지 않다.
				>,< : 초과, 미만
				>=,<= : 이상, 이하

			논리 연산자
				&&(AND), A&&B, 두 조건식 모두 참이면 참
				||(OR), A||B, 둘 중 하나라도 참이면 참

			단항 연산자	
				!(NOT), !A, 조건식이 참이면 거짓으로, 거짓이면 참으로 변경
		
			삼항 염산자 (메소드에서 정말 많이 사용)
				?:, 조건식? 참 : 거짓, 조건식이 참이면 참, 거짓이면 거짓
				삼항 연산자 전체를 값으로 볼 수 있어야 한다!!! 
				ex) int result=10>11?10:11;

			삼항 연산자를 사용해야 할 때
				조건식이 딱 한 개 있을 경우에 사용

>> 대입 연산자(복합 대입 연산자, 누적 연산자)
		+=, -=, *=, /=, %=, ......

		int money=10000;
		// money=money-2000;
		money-=2000;
		System.out.println(money)

>> 증감 연산자(++,--)
		전위형: 해당 라인부터 바로 적용
				++data, --data

		후위형: 다음 라인부터 적용
				data++, data--

----------------------------------------------------------------------------------------------------------------------------------------------
2. 제어문 (조건문)
----------------------------------------------------------------------------------------------------------------------------------------------
>> 조건문
			 ▶ if문
					if(조건식){
							실행할 문장;
					}
					if(조건식){
							실행할 문장;
					}
					if(조건식){
							실행할 문장;
					}

					if(조건식){
							실행할 문장;
					}
					else if(조건식){
							실행할 문장;
					}
					...
					else{
							실행할 문장;
					}

			 ▶ switch문
					switch(값){
							case1 값1:
									실행할 문장;
									break;

							case2 값2:
									실행할 문장;
									break;

							case3 값3:
									실행할 문장;
									break;
							...
							default:
									실행할 문장;
							}
>> 각각의 조건문 정리
			(1)삼항연산자: 조건식이 1개 있을 경우 사용
			(2) if문: 조건식에(>,<,>=,<=) 연산자를 사용하거나, 여러 개의 조건식을 논리 연산자로 연결할 때 사용
			(3) switch문: 하나의 변수에 여러 개의 값이 담길 수 있고, 각 값이 같은지를 비교할 때 사용

----------------------------------------------------------------------------------------------------------------------------------------------
3. 제어문 (반복문)
----------------------------------------------------------------------------------------------------------------------------------------------
	
			▶ for문
				for(초기식; 조건식; 증감식){
						실행할 문장;
				}

			1. 초기식
			---------
			2. 조건식(true)
			3. 실행할 문장
			4. 증감식
			5. 조건식(true)
			6. 실행할 문장
			7. 증감식
			8. 조건식(false)
			---------

			▶ while문
				while(조건식){
						실행할 문장;
				}

			※ for문과 while 문의 차이
					for문: 몇 번 반복할 지 알 때
					while문: 몇 번 반복할 지 모를 때

			▶ do-while문
				do{
					실행할 문장;
				}
				while(조건식);

			※do~while문 목적
				처음부터 조건식이 false일지라도 무조건 한 번은 실행해야 할 때.

----------------------------------------------------------------------------------------------------------------------------------------------
4. 기타 제어문
----------------------------------------------------------------------------------------------------------------------------------------------
		break
				중괄호 영역 즉시 탈출, 단 if문에서 사용시 if문 탈출이 아닌 if문을 감싸는 중괄호를 탈출한다.
		
		continue
				다음 반복으로 넘어가기, 아래의 코드를 실행하고 싶지 않을 때 사용한다.
