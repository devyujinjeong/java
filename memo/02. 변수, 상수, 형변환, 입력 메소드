---------------------------------------------------------------------------------------------------------------------------------------------------
1. 변수
---------------------------------------------------------------------------------------------------------------------------------------------------

>> 변수 :  저장공간, 저장공간에 값을 저장하는 것이지 x가 무조건 10인것은 아님. 어떤 값을 저장할지는 그 때마다 달라짐
				   x			           =		        10
			저장공간의 이름     대입연산자 	  값(상수)

>> 자료형(type) : 변수의 종류

		  자료형		type			byte			값
		
		  정수형		int		 	   4			1,0,-12,....

		  실수형		double	 	 8 			0.0,1.0,-5.56,....
                float		 	 4			0.0f,1.0f,-5.56f,....
		  (double이 기본형이기 때문에 float을 쓰기 위해서는 f를 뒤에 적어야 함)

		  문자형		char			 2			'한','0,'A','.'.... (유니코드)

		  문자열   	String	 	 ?			"정유진", "ABC","0","0.1","1.0F"....

>> 변수의 선언 
			자료형 변수명 = 초기값(선언할 때 처음 넣는 값); //초기화
			자료형 변수명;

			ex) int x=10;  //x라는 이름의 저장공간이 할당(allocation)되고 그 안에 10이 들어간다.

>> 주소
			int x=10;
			x라는 이름의 저장공간이 RAM에 할당되면 고유한 값인 주소값이 부여된다.
			계속 실행되거나 종료되는 프로그램이 있기 때문에, 주소값은 변경될 수 있으나 중복은 없다.

>> 변수의 사용 (저장공간과 값을 구분하는게 정말 중요)
			int data=10; // 저장공간: 앞에 자료형이 있거나 뒤에 대입연산자가 있으면 저장공간임
			data + 9; // 값: 여기에서 data는 값으로 보기
			data = 20; // 저장공간        
			data = data+99; // 앞의 data는 저장공간이고, 뒤의 data는 값임
			System.out.print(data); //값

>> 변수 선언 시 주의사항
			(1) 같은 이름의 변수로 선언할 수 없다.
			(2) 초기화를 해준다.
			(3) 되도록 선언부에 한꺼번에 선언한다. (영역 상단)

>> 변수명 주의사항
			(1) 문자로 시작해야 한다.
			(2) 특수문자를( _제외) 사용할 수 없다.
			(3) 소문자로 시작한다.
			(4) 공백을 사용할 수 없다.
			  	good_boy: 언더바 표기법(이건 Dbms)-->이거 쓰지 말자
				  goodBoy: 카멜 표기법 (자바는 무조건 카멜 표기법 사용)
			(5) 되도록 한글은 사용하지 않는다.
			(6) 명사로 사용한다.
			(7) 뜻이 있는 단어를 사용한다. (data, number, age, name,.....)

>> 변수를 사용하는 이유
			(1) 반복되는 값을 쉽게 관리하기 위해서 
			(2)의미 없는 값을 하나의 정보로 만들기 위해서 (자료구조)

---------------------------------------------------------------------------------------------------------------------------------------------------
2. 상수
---------------------------------------------------------------------------------------------------------------------------------------------------
			
			변수와 다르게 항상 그대로인 수
			값을 변경할 수 없도록 한다.

			final 자료형 상수명 = 값; //상수로 선언됨

---------------------------------------------------------------------------------------------------------------------------------------------------
3. 형변환(Casting)
---------------------------------------------------------------------------------------------------------------------------------------------------

>> 자동 형변환
		 	정수+정수=정수
			정수+실수=실수
			문자(a,b,c같은것들)+정수=정수
			--> 아스키 코드
			3+0.0=3.0
			5/2=2 (몫)
			5%2=1 (나머지)
		
>> 강제 형변환
				(자료형)값;
				예) (double)3; //실수로 변화

>> 문자열 형변환
			(1) 다른 자료형을 문자열로
				  문자열과 다른 일반 자료형을 연결하면 결과는 문자열이 된다.

 			(2) 문자열을 다른 자료형으로
			  	일반 자료형은 일반 자료형끼리만 형변환이 가능하다.
				  문자열 타입은 클래스 타입이므로, 일반 자료형의 클래스 타입의 도움을 받아야 한다.

				Integer.parseInt("") --> 문자열에서 변환된 정수 값
				Float.parseFloat("") --> 문자열에서 변환된 실수 값
				Double.parseDouble("") --> 문자열에서 변환된 실수 값

---------------------------------------------------------------------------------------------------------------------------------------------------
4. 입력
---------------------------------------------------------------------------------------------------------------------------------------------------
>> 입력
			커서가 깜빡이고 있는 상태.
     	입력하기 전에 출력을 통해 어떤 값을 입력해야할지 사용자에게 알려줘야 한다.

>> 입력 클래스
			Scanner sc = new Scanner(System.in);

>> 입력 메소드
			next(): 사용자가 입력한 문자열 값
					- 사용자가 입력한 값 중 공백 또는 줄바꿈 문자를 구분점으로 각 문자열을 분리한다.
					- 첫번째 문자열은 첫번째 next()에 담고
				 	  두번째 문자열은 두번째 next()에 담는다.

			nextLine(): 사용자가 입력한 문자열 값
					- 공백 또는 줄바꿈 문자도 값으로 취급하기 때문에 그대로 
