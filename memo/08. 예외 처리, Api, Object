-----------------------------------------------------------------------------------------------------------------------------------
1. 예외 처리
-----------------------------------------------------------------------------------------------------------------------------------
>> 예외 처리
		컴파일 시, 빌드 시, 런타임 시 오류가 발생하면 강제 종료된다.
		보통 오류가 발생하지 않도록 제어문을 사용하지만,
		제어문을 사용할 수 없을 경우 예외 처리 문법을 사용한다.

>> 예외 처리 문법
		try {
			오류가 발생할 수 있는 문장

		} catch(예외이름 객체명) {
			오류 발생 시 실행할 문장

		} ...

		} finally {
			catch에서 잡히지 않은 오류가 있더라도 무조건 실행	
		}

-----------------------------------------------------------------------------------------------------------------------------------
2. API(Application Programming Interface)
-----------------------------------------------------------------------------------------------------------------------------------
>> API
		개발에 필요한 라이브러리들의 집합.
		선배 개발자들이 작성해 놓은 소스코드.


>> 내부 API(기본 API)
		JDK 설치 시 기본적으로 제공해주는 API	
		docs.oracle.com/javase

>> 외부 API
		선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
		보통 JAR 파일로 배포하며 자바 프로젝트의 build path에 추가하여 사용할 수 있다.

JAR 파일로 배포하기
		배포할 클래스 또는 패키지 우클릭
		> Export > JAVA/JAR file 선택 > Next
		> destination을 원하는 경로로 선택
		> Export Java source files... 체크
		> Finish

JAR 파일을 프로젝트에 추가하기
		배포된 JAR파일을 다운 받기
		> 프로젝트 우클릭 > Build Path > Configure Build Path
		> Libraries 탭 클릭 > ClassPath(안되면 ModulePath) 클릭 > Add External JARs
		> 저장된 경로의 .jar파일을 더블 클릭으로 추가 > Apply 클릭
		> Orders and Exports 탭 클릭
		> Select All 클릭 > Apply and Close

-----------------------------------------------------------------------------------------------------------------------------------
3. Object 클래스
-----------------------------------------------------------------------------------------------------------------------------------
>> toString()
		항상 객체명을 출력할 때에는 toString()을 붙여서 출력해준다.
		따라서 객체명만 출력메소드에 전달하더라도 toString()의 문자열 값이 출력된다.
		기본적으로 Object에서는 소속과 필드 주소를 문자열로 리턴해주지만,
		실사용에서는 불필요한 정보이기 때문에, 재정의한 뒤 필드의 정보를 확인하도록 구현한다.
		실무에서는 클래스 선언 시 각 필드의 초기화 여부를 확인하기 위해 toString()을 재정의하여 사용한다.

>> equals()
		주소값을 비교하는 메소드이며 ==과 동일하다.
		주소 비교가 아닌 원하는 필드의 비교가 필요하다면 반드시 equals()를 재정의해서 사용해야 한다.

>> hashCode()
		JVM에서 관리하는 중복 없는 값.
		실제 메모리에 할당되는 주소와 다르다.
